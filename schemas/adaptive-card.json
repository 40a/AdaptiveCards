{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "id":  "https://microsoft.github.io/AdaptiveCards/schemas/adaptive-card.json",
  "type": "object",
  "title": "Microsoft Adaptive Card Schema",
  "description": "Card schema for the adaptive card.",
  "properties": {
    "@type": {
      "type": "string",
      "enum": [
        "AdaptiveCard"
      ]
    },
    "title": {
      "type": "string",
      "description": "Title/caption for the adaptive card."
    },
    "body": {
      "$ref": "#/definitions/CardItems"
    },
    "actions": {
      "$ref": "#/definitions/Actions"
    }
  },
  "required": [
    "@type"
  ],
  "definitions": {
    "AdaptiveCard": {
      "additionalProperties": false,
      "properties": {
        "@type": {
          "type": "string",
          "enum": [
            "AdaptiveCard"
          ]
        },
        "title": {
          "type": "string",
          "description": "Title/caption for the adaptive card."
        },
        "body": {
          "$ref": "#/definitions/CardItems"
        },
        "actions": {
          "$ref": "#/definitions/Actions"
        }
      },
      "required": [
        "@type"
      ],
      "type": "object"
    },
    "Action": {
      "anyOf": [
        {
          "$ref": "#/definitions/SubmitAction"
        },
        {
          "$ref": "#/definitions/CancelAction"
        },
        {
          "$ref": "#/definitions/ShowCardAction"
        },
        {
          "$ref": "#/definitions/HttpAction"
        },
        {
          "$ref": "#/definitions/OpenUrlAction"
        }
      ]
    },
    "Actions": {
      "type": "array",
      "additionalItems": true,
      "items": {
        "$ref": "#/definitions/Action"
      }
    },
    "CancelAction": {
      "additionalProperties": false,
      "description": "When CancelAction is invoked it resets any input that is in scope, and closes a card if it is part of a card which was shown via ShowCardAction.",
      "properties": {
        "@type": {
          "type": "string",
          "enum": [
            "CancelAction"
          ]
        },
        "title": {
          "type": "string",
          "description": "Label for button or link that represents this action"
        }
      },
      "required": [
        "@type"
      ],
      "type": "object"
    },
    "CardItem": {
      "oneOf": [
        {
          "$ref": "#/definitions/TextBlock"
        },
        {
          "$ref": "#/definitions/Image"
        },
        {
          "$ref": "#/definitions/Container"
        },
        {
          "$ref": "#/definitions/ColumnSet"
        },
        {
          "$ref": "#/definitions/FactSet"
        },
        {
          "$ref": "#/definitions/ImageSet"
        },
        {
          "$ref": "#/definitions/TextInput"
        },
        {
          "$ref": "#/definitions/ChoiceInput"
        }
      ]
    },
    "CardItems": {
      "type": "array",
      "additionalItems": true,
      "items": {
        "$ref": "#/definitions/CardItem"
      }
    },
    "Choice": {
      "additionalProperties": false,
      "properties": {
        "display": {
          "type": "string",
          "description": "The display text for a choice"
        },
        "isSelected": {
          "type": "boolean",
          "description": "is the choice selected"
        },
        "speak": {
          "$ref": "#/definitions/Speak",
          "description": ""
        },
        "value": {
          "type": "string",
          "description": "the raw value for the choice"
        }
      },
      "required": [
        "display",
        "value"
      ],
      "type": "object"
    },
    "ChoiceInput": {
      "additionalProperties": false,
      "description": "Shows an array of Choice objects",
      "properties": {
        "@type": {
          "description": "Must be ChoiceInput",
          "enum": [
            "ChoiceInput"
          ],
          "type": "string"
        },
        "choices": {
          "type": "array",
          "description": "the choice options",
          "items": {
            "$ref": "#/definitions/Choice"
          }
        },
        "id": {
          "type": "string",
          "description": "Id for the value (will be used to identify collected input when SUBMIT is clicked)"
        },
        "multiSelect": {
          "type": "boolean",
          "description": "allow multiple choices to be selected (Default=false)"
        },
        "placeholder": {
          "type": "string",
          "description": "Hint of expected value desired (may be ignored by some clients)"
        },
        "style": {
          "$ref": "#/definitions/ChoiceInputStyle"
        },
        "title": {
          "type": "string",
          "description": "Title Description of the input desired"
        },
        "value": {
          "type": "string",
          "description": "The initial value for a field"
        }
      },
      "required": [
        "@type",
        "id",
        "choices"
      ],
      "type": "object"
    },
    "ChoiceInputStyle": {
      "type": "string",
      "description": "Style hint for ChoiceInput.",
      "enum": [
        "compact",
        "expanded"
      ]
    },
    "Column": {
      "additionalProperties": false,
      "description": "Defines a container that is part of a ColumnSet",
      "properties": {
        "@type": {
          "type": "string",
          "description": "Must be Column",
          "enum": [
            "Column"
          ]
        },
        "selectAction": {
          "$ref": "#/definitions/Action"
        },
        "actions": {
          "$ref": "#/definitions/Actions"
        },
        "backgroundColor": {
          "type": "string",
          "description": "The color of the container's background. This can be any color, and must be expressed in the RGB format with each color component expressed as a 2 digit hexadecimal number. Example: FFFFFF for white, 000000 for black, and 8C8C8C for a shade of gray."
        },
        "backgroundImageUrl": {
          "type": "string",
          "description": "The URL of an image to be used to fill the background of the container. The image is strached horizontally so it fills the entire available width of the container, and its original aspect ratio is maintained."
        },
        "items": {
          "$ref": "#/definitions/CardItems"
        },
        "size": {
          "type": "string",
          "description": "auto, stretch, or a number representing relative width of the column in the column group"
        },
        "speak": {
          "$ref": "#/definitions/Speak"
        }
      },
      "required": [
        "@type",
        "items"
      ],
      "type": "object"
    },
    "ColumnSet": {
      "additionalProperties": false,
      "description": "The column group Item adds the ability to have a set of Column objects",
      "properties": {
        "@type": {
          "type": "string",
          "description": "Must be ColumnSet",
          "enum": [
            "ColumnSet"
          ]
        },
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Column"
          }
        },
        "speak": {
          "$ref": "#/definitions/Speak"
        }
      },
      "required": [
        "@type",
        "columns"
      ],
      "type": "object"
    },
    "Container": {
      "additionalProperties": false,
      "description": "The Container is a CardItem which contains a list of CardItems that are logically grouped",
      "properties": {
        "@type": {
          "type": "string",
          "description": "Must be Container",
          "enum": [
            "Container"
          ]
        },
        "selectAction": {
          "$ref": "#/definitions/Action"
        },
        "actions": {
          "$ref": "#/definitions/Actions"
        },
        "backgroundColor": {
          "type": "string",
          "description": "The color of the container's background. This can be any color, and must be expressed in the RGB format with each color component expressed as a 2 digit hexadecimal number. Example: FFFFFF for white, 000000 for black, and 8C8C8C for a shade of gray."
        },
        "backgroundImageUrl": {
          "type": "string",
          "description": "The URL of an image to be used to fill the background of the container. The image is strached horizontally so it fills the entire available width of the container, and its original aspect ratio is maintained."
        },
        "items": {
          "$ref": "#/definitions/CardItems"
        },
        "speak": {
          "$ref": "#/definitions/Speak"
        }
      },
      "required": [
        "@type",
        "items"
      ],
      "type": "object"
    },
    "Fact": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "speak": {
          "$ref": "#/definitions/Speak"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "FactSet": {
      "additionalProperties": false,
      "description": "The FactSet Item makes it simple to display a series of facts (e.g. name/value pairs) in a tabular form.",
      "properties": {
        "@type": {
          "type": "string",
          "description": "Must be FactSet",
          "enum": [
            "FactSet"
          ]
        },
        "speak": {
          "$ref": "#/definitions/Speak"
        },
        "facts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Fact"
          }

        }
      },
      "required": [
        "@type",
        "facts"
      ],
      "type": "object"
    },
    "HorizontalAlignment": {
      "type": "string",
      "description": "Controls how Items are horizontally positioned within their container.",
      "enum": [
        "left",
        "center",
        "right"
      ]
    },
    "HttpAction": {
      "additionalProperties": false,
      "description": "HttpAction represents the properties needed to do an Http request. All input properties are available for use via data binding. Properties can be data bound to the Uri and Body properties, allowing you to send a request to an arbitrary url.",
      "properties": {
        "@type": {
          "type": "string",
          "enum": [
            "HttpAction"
          ]
        },
        "body": {
          "type": "string",
          "description": "content to post (can have binding information)"
        },
        "headers": {
          "type": "object",
          "description": "Object which represents headers Example: { \"content-type\":\"application/json\" }"
        },
        "method": {
          "type": "string",
          "enum": [ "POST", "PUT", "DELETE", "GET" ],
          "description": "Http method (Default: POST)"
        },
        "title": {
          "type": "string",
          "description": "Label for button or link that represents this action"
        },
        "url": {
          "type": "string",
          "description": "url to use (can have binding information)"
        }
      },
      "required": [
        "@type",
        "url"
      ],
      "type": "object"
    },
    "Image": {
      "additionalProperties": false,
      "description": "The Image Item allows for the inclusion of images in an Adaptive Card.",
      "properties": {
        "@type": {
          "type": "string",
          "description": "Must be Image",
          "enum": [
            "Image"
          ]
        },
        "selectAction": {
          "$ref": "#/definitions/Action"
        },
        "horizontalAlignment": {
          "$ref": "#/definitions/HorizontalAlignment"
        },
        "size": {
          "$ref": "#/definitions/ImageSize"
        },
        "speak": {
          "$ref": "#/definitions/Speak"
        },
        "style": {
          "$ref": "#/definitions/ImageStyle"
        },
        "url": {
          "type": "string",
          "description": "The URL to the image."
        }
      },
      "required": [
        "@type",
        "url"
      ],
      "type": "object"
    },
    "ImageSet": {
      "additionalProperties": false,
      "description": "The ImageSet allows for the inclusion of a collection images like a photogallery.",
      "properties": {
        "@type": {
          "type": "string",
          "description": "Must be ImageSet",
          "enum": [
            "ImageSet"
          ]
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }

        },
        "size": {
          "$ref": "#/definitions/ImageSize"
        },
        "speak": {
          "$ref": "#/definitions/Speak"
        }
      },
      "required": [
        "@type",
        "images"
      ],
      "type": "object"
    },
    "ImageSize": {
      "type": "string",
      "description": "Controls the horizontal size (width) of Item. ",
      "enum": [
        "small",
        "normal",
        "medium",
        "large",
        "extraLarge"
      ]
    },
    "ImageStyle": {
      "type": "string",
      "description": "Controls the way Image Items are displayed",
      "enum": [
        "normal",
        "person"
      ]
    },
    "OpenUrlAction": {
      "additionalProperties": false,
      "description": "When OpenUrlAction is invoked it will show the given url, either by launching it to an external web browser or showing in-situ with embedded web browser.",
      "properties": {
        "@type": {
          "type": "string",
          "enum": [
            "OpenUrlAction"
          ]
        },
        "title": {
          "type": "string",
          "description": "Label for button or link that represents this action"
        },
        "url": {
          "type": "string",
          "description": "Default (browser) url to use"
        },
        "platformUrls": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "os": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            }
          }
        }
      },
      "required": [
        "@type",
        "url"
      ],
      "type": "object"
    },
    "ShowCardAction": {
      "additionalProperties": false,
      "description": "ShowCard defines an inline AdaptiveCard which is shown to the user when it is clicked.",
      "properties": {
        "@type": {
          "type": "string",
          "enum": [
            "ShowCardAction"
          ]
        },
        "title": {
          "type": "string",
          "description": "Label for button or link that represents this action"
        },
        "card": {
          "$ref": "#/definitions/AdaptiveCard"
        }
      },
      "required": [
        "@type",
        "card"
      ],
      "type": "object"
    },
    "Speak": {
      "type": "string",
      "description": "Specifies what should be spoken for this entire Item. This is simple text or SSML fragment"
    },
    "SubmitAction": {
      "additionalProperties": false,
      "description": "Submit action gathers up input fields, merges with optional data field and generates event to client asking for data to be submitted. It is up to the client to determine how that data is processed. For example: With BotFramework bots the client would send an activity through the messaging medium to the bot.",
      "properties": {
        "@type": {
          "type": "string",
          "enum": [
            "SubmitAction"
          ]
        },
        "title": {
          "type": "string",
          "description": "Label for button or link that represents this action"
        },
        "data": {
          "type": "object",
          "description": "initial data that input fields will be combined with. This is essentially 'hidden' properties"
        }
      },
      "required": [
        "@type"
      ],
      "type": "object"
    },
    "TextBlock": {
      "additionalProperties": false,
      "description": "The TextBlock Item allows for the inclusion of text, with various font sizes, weight and color, in Adaptive Cards.",
      "properties": {
        "@type": {
          "type": "string",
          "description": "Must be TextBlock",
          "enum": [
            "TextBlock"
          ]
        },
        "color": {
          "type": "string",
          "description": "Controls the color of TextBlock Items.",
          "enum": [
            "default",
            "dark",
            "light",
            "accent",
            "good",
            "warning",
            "attention"
          ]
        },
        "horizontalAlignment": {
          "$ref": "#/definitions/HorizontalAlignment"
        },
        "maxLines": {
          "type":"number",
          "description": "When Wrap is true, you can specify the maximum number of lines to allow the textBlock to use."
        },
        "isSubtle": {
          "type": "boolean",
          "description": "Indicates whether the color of the text should be slightly toned down to appear less prominent"
        },
        "size": {
          "type": "string",
          "description": "Controls how Items are horizontally positioned within their container.",
          "enum": [
            "small",
            "normal",
            "medium",
            "large",
            "extraLarge"
          ]
        },
        "speak": {
          "$ref": "#/definitions/Speak"
        },
        "text": {
          "type": "string",
          "description": "The actual text to display"
        },
        "weight": {
          "description": "Controls the weight of TextBlock Items",
          "enum": [
            "lighter",
            "normal",
            "bolder"
          ],
          "type": "string"
        }
      },
      "required": [
        "@type",
        "text"
      ],
      "type": "object"
    },
    "TextInput": {
      "additionalProperties": false,
      "description": "TextInput collects text from the user,",
      "properties": {
        "@type": {
          "type": "string",
          "description": "Must be TextInput",
          "enum": [
            "TextInput"
          ]
        },
        "id": {
          "type": "string",
          "description": "Id for the value (will be used to identify collected input when SUBMIT is clicked)"
        },
        "max": {
          "type": "string",
          "description": "hint of maximum value (may be ignored by some clients)"
        },
        "maxLength": {
          "type": "string",
          "description": "hint of maximum length characters to collect (may be ignored by some clients)"
        },
        "min": {
          "type": "string",
          "description": "hint of minimum value (may be ignored by some clients)"
        },
        "placeholder": {
          "type": "string",
          "description": "Hint of expected value desired (may be ignored by some clients)"
        },
        "step": {
          "type": "number",
          "description": "hint of step value (may be ignored by some clients)"
        },
        "style": {
          "$ref": "#/definitions/TextInputStyle"
        },
        "title": {
          "type": "string",
          "description": "Title Description of the input desired"
        },
        "value": {
          "type": "string",
          "description": "The initial value for a field"
        }
      },
      "required": [
        "@type",
        "id"
      ],
      "type": "object"
    },
    "TextInputStyle": {
      "type": "string",
      "description": "Style hint for TextInput.",
      "enum": [
        "tel",
        "url",
        "email",
        "password",
        "number",
        "range",
        "date",
        "datetime",
        "time",
        "month",
        "week"
      ]
    }
  }
}