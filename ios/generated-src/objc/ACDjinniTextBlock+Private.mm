// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from adaptivecards.djinni

#import "ACDjinniTextBlock+Private.h"
#import "ACDjinniTextBlock.h"
#import "ACDjinniBaseCardElement+Private.h"
#import "ACDjinniTextColor+Private.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface ACDjinniTextBlock ()

- (id)initWithCpp:(const std::shared_ptr<::AdaptiveCards::DjinniTextBlock>&)cppRef;

@end

@implementation ACDjinniTextBlock {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::AdaptiveCards::DjinniTextBlock>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::AdaptiveCards::DjinniTextBlock>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable ACDjinniTextBlock *)Create {
    try {
        auto objcpp_result_ = ::AdaptiveCards::DjinniTextBlock::Create();
        return ::djinni_generated::DjinniTextBlock::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable ACDjinniTextBlock *)Deserialize:(nonnull NSString *)jsonString {
    try {
        auto objcpp_result_ = ::AdaptiveCards::DjinniTextBlock::Deserialize(::djinni::String::toCpp(jsonString));
        return ::djinni_generated::DjinniTextBlock::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)SetText:(nonnull NSString *)text {
    try {
        _cppRefHandle.get()->SetText(::djinni::String::toCpp(text));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)GetText {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->GetText();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)SetWrap:(BOOL)wrap {
    try {
        _cppRefHandle.get()->SetWrap(::djinni::Bool::toCpp(wrap));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)GetWrap {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->GetWrap();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)SetTextColor:(ACDjinniTextColor)textColor {
    try {
        _cppRefHandle.get()->SetTextColor(::djinni::Enum<::AdaptiveCards::DjinniTextColor, ACDjinniTextColor>::toCpp(textColor));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (ACDjinniTextColor)GetTextColor {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->GetTextColor();
        return ::djinni::Enum<::AdaptiveCards::DjinniTextColor, ACDjinniTextColor>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable ACDjinniBaseCardElement *)AsBaseCardElement {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->AsBaseCardElement();
        return ::djinni_generated::DjinniBaseCardElement::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto DjinniTextBlock::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto DjinniTextBlock::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<ACDjinniTextBlock>(cpp);
}

}  // namespace djinni_generated

@end
